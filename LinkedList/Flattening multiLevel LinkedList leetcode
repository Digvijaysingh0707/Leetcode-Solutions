package LinkedList;

import java.util.Stack;

class Node {
    int val;
    Node prev;
    Node next;
    Node child;

    Node(int val, Node prev,Node next,Node child) {
        this.val = val;
        this.prev=prev;
        this.next = next;
        this.child=child;
    }
}
public class MDLL {
    public static void print(Node head){
        Node temp=head;
        while (temp!=null){
            System.out.print(temp.val+"->");
            temp=temp.next;
        }
        System.out.println("null");
    }
    public  static Node flatten(Node head){
        if (head==null)return head;
        Node pseudoHead = new Node(0,null,head,null);
        Node current,prev=pseudoHead;
        Stack<Node> stack = new Stack<>();
        stack.push(head);
        while (!stack.isEmpty()){
            current=stack.pop();
            prev.next=current;
            current.prev=prev;
            if (current.next!=null){
                stack.push(current.next);
            }
            if (current.child!=null){
                stack.push(current.child);
                current.child=null;
            }
            prev=current;
        }
        pseudoHead.next.prev=null;
        return pseudoHead.next;

    }

}
