nlogn app.
class Solution {
     public int singleNonDuplicate(int[] nums) {
         if(nums.length==1){
             return nums[0];
         }
         if(nums.length==2){
             return Math.max(nums[0],nums[1]);
         }
        Arrays.sort(nums);
        int x=-1;
        for (int i=1;i<nums.length-1;i++){
            if (nums[i]!=nums[i-1]&&nums[i]!=nums[i+1]){
                x=nums[i];
                break;
            }
        }
         if(x==-1){
             if(nums[nums.length-1]!=nums[nums.length-2])
             return nums[nums.length-1];
             else return nums[0];
         }
        return x;

    }
}


________________________________________________________________________________
log n approach

            
class Solution {
    public static boolean single(int a[],int m){
        if(m==0&&a[0]!=a[1])return true;
        if(m==a.length-1&&a[m]!=a[m-1])return true;
        if(a[m]!=a[m-1]&&a[m]!=a[m+1])return true;
        return false;
    }
     public int singleNonDuplicate(int[] nums) {
        int n=nums.length;
         if(n==1)return nums[0];
         int l=0,h=n-1;
         while(l<=h){
             int mid=(l+h)/2;
             if(single(nums,mid))return nums[mid];
             if((mid+1)<n&&nums[mid]==nums[mid+1]){
                 if(mid%2==0)l=mid+1;
                 else h=mid-1;
             }
             if(mid>=1&&nums[mid]==nums[mid-1] ){
               if(mid%2!=0)l=mid+1;
                 else h=mid-1;  
             }
         }
         return nums[l];

    }
}








