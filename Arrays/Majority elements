import javax.swing.plaf.IconUIResource;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.util.*;
public class Main {
    static ArrayList<Integer> majority(ArrayList<Integer> a){
        int element1=a.get(0);
        int element1count=1;
        int element2=0;
        int element2count=0;
        for (int i=1;i<a.size();i++){
            if (element1==a.get(i)){
                element1count++;
            }
            else if (element2==a.get(i)){
                element2count++;
            }
            else if (element1count==0){
                element1=a.get(i);
                element1count=1;
            }
            else if (element2count==0){
                element2=a.get(i);
                element2count=1;
            }
            else{
                element1count--;
                element2count--;
            }
        }
        //Iterate ive the list and find that the cout of element1 and element2 is more than n/3 or not
        element1count=element2count=0;
        for (int i=0;i<a.size();i++){
            if(a.get(i)==element1)element1count++;
            else if (a.get(i)==element2)element2count++;
        }
        ArrayList<Integer> ans= new ArrayList<>();
        if(element1count>a.size()/3){
           ans.add(element1);
        }
         if (element2count>a.size()/3){
             ans.add(element2);
         }
         return ans;


    }
    public static void main(String[] args) {
        FastScanner sc = new FastScanner();
        int n=sc.nextInt();
        ArrayList<Integer> a= new ArrayList<>();
        for (int i=0;i<n;i++){
            int x=sc.nextInt();
            a.add(x);
        }
        ArrayList<Integer> ans= new ArrayList<>();
        ans=majority(a);
        if (ans.size()==0){
            System.out.println("No Majority Elements");
        }
        else{
            for (int i=0;i<ans.size();i++){
                System.out.print(ans.get(i)+" ");
            }
        }


    }

    static void sort(int[] a) {
        ArrayList<Integer> l=new ArrayList<>();
        for (int i:a) l.add(i);
        Collections.sort(l);
        for (int i=0; i<a.length; i++) a[i]=l.get(i);
    }
    static void sortReverse(long[] a) {
        ArrayList<Long> l=new ArrayList<>();
        for (long i:a) l.add(i);
//        Collections.sort.(l);
        Collections.sort(l,Collections.reverseOrder());
        for (int i=0; i<a.length; i++) a[i]=l.get(i);
    }

    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        String next() {
            while (!st.hasMoreTokens())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }
        int[] readArray(int n) {
            int[] a=new int[n];
            for (int i=0; i<n; i++) a[i]=nextInt();
            return a;
        }
        long nextLong() {
            return Long.parseLong(next());
        }
    }


}
