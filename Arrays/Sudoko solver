import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;
public class Main {
    static boolean canPlace(int mat[][],int i,int j,int n,int number){
        //check for row and col
        for (int x=0;x<n;x++){
            if (mat[x][j]==number||mat[i][x]==number){
                return false;
            }
        }
        //check for subgrid
        //sx and sy is the starting point of subgrid
        int rn=(int)Math.sqrt(n);
        int sx=(i/rn)*rn;
        int sy=(j/rn)*rn;
        for (int x=sx;x<sx+rn;x++){
            for (int y=sy;y<sy+rn;y++){
                if (mat[x][y]==number){
                    return false;
                }
            }
        }
        return true;

    }
    static boolean solvesudoko(int mat[][],int i,int j,int n){
        //Base case
        if (i==n){
            //Print the matrix
            for ( i=0;i<n;i++){
                for (j=0;j<n;j++){
                    System.out.print(mat[i][j]+" ");
                }
                System.out.println();
            }
            return true;
        }
        //Case row end
        if (j==n){
            return solvesudoko(mat,i+1,0,n);
        }
        //skip the prefilled cells
        if (mat[i][j]!=0){
            return solvesudoko(mat,i,j+1,n);
        }
        //Rec case
        //Fill the current cell with possible options
        for (int number=1;number<=n;number++){
            if (canPlace(mat,i,j,n,number)){
                mat[i][j]=number;
                boolean cansolve=solvesudoko(mat,i,j+1,n);
                if (cansolve==true)return true;
            }
        }
        //Backtrack here
        mat[i][j]=0;
        return false;
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n=sc.nextInt();
        int a[][]= new int[n][n];
        for (int i=0;i<n;i++){
            for (int j=0;j<n;j++){
                a[i][j]=sc.nextInt();
            }
        }
        solvesudoko(a,0,0,n);



        }





    static void sort(int[] a) {
        ArrayList<Integer> l=new ArrayList<>();
        for (int i:a) l.add(i);
        Collections.sort(l);
        for (int i=0; i<a.length; i++) a[i]=l.get(i);
    }
    static void sortReverse(long[] a) {
        ArrayList<Long> l=new ArrayList<>();
        for (long i:a) l.add(i);
//        Collections.sort.(l);
        Collections.sort(l,Collections.reverseOrder());
        for (int i=0; i<a.length; i++) a[i]=l.get(i);
    }

    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        String next() {
            while (!st.hasMoreTokens())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }
        int[] readArray(int n) {
            int[] a=new int[n];
            for (int i=0; i<n; i++) a[i]=nextInt();
            return a;
        }
        long nextLong() {
            return Long.parseLong(next());
        }
    }


}
