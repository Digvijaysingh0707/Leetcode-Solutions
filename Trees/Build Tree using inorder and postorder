import java.util.Scanner;
class Node{
    int data;
    Node left;
    Node right;
    Node next;
    Node(int data){
        this.data=data;
        left=right=null;
    }
}
public class Main {
    static Scanner sc = new Scanner(System.in);
    static Node create(){
        int data= sc.nextInt();
        if (data==-1)return null;
        Node root = new Node(data);
        root.left=create();
        root.right=create();
        return root;
    }
    static int index=0;
    static Node buildTree(int inorder[],int postorder[],int s,int e){
        if (s>e)return null;
        int data=postorder[index];
        index--;
        Node root = new Node(data);
        int k=-1;
        for (int i=s;i<=e;i++){
            if (data==inorder[i]){
                k=i;
                break;
            }
        }
        root.right=buildTree(inorder,postorder,k+1,e);
        root.left=buildTree(inorder,postorder,s,k-1);
        return root;
    }
    static void preorder(Node root){
        if (root==null)return;
        System.out.print(root.data+" ");
        preorder(root.left);
        preorder(root.right);
    }
    static Node buildTree(int inorder[],int postorder[]){
        if (inorder.length==0)return null;
        index=inorder.length-1;
       return buildTree(inorder,postorder,0,inorder.length-1);

    }



    public static void main(String[] args) {

        int n=sc.nextInt();
        int a[]= new int[n];
        for (int i=0;i<n;i++){
            a[i]=sc.nextInt();
        }
        int b[]= new int[n];
        for (int i=0;i<n;i++){
            b[i]=sc.nextInt();
        }
        Node root =buildTree(a,b);
        preorder(root);




    }

}

