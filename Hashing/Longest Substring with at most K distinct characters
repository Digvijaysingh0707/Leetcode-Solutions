import java.util.HashMap;
import java.util.Scanner;

public class LongestSubstringwithKdistinct {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- >= 1) {
            String s = sc.next();
            int k = sc.nextInt();
            int ans = longest(s, k);
            System.out.println(ans);
        }
    }
    static int longest(String s,int k){
        int n=s.length();
        if (n*k==0)return 0;
        int left=0;
        int maxlen=0;
        HashMap<Character,Integer> map= new HashMap<>();
        for (int right=0;right<n;right++){
            char ch=s.charAt(right);
            map.put(ch,right);
            if (map.size()==k+1){
                char char_with_min_index='0';
                int min_Index=Integer.MAX_VALUE;
                for (char key:map.keySet()){
                    if (map.get(key)<char_with_min_index){
                        char_with_min_index=key;
                        min_Index=map.get(key);

                    }
                }
                left=min_Index+1;
                map.remove(char_with_min_index);
            }
            maxlen=Math.max(maxlen,right-left+1);
        }
        return maxlen;

    }
}
