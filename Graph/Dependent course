import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.*;
public class Main {
    static boolean canFinish(int numcourse,int prerequisite[][]){
        int indegree[]= new int[numcourse];
        for (int i=0;i<prerequisite.length;i++){
            indegree[prerequisite[i][0]]++;
        }
        Queue<Integer> bfs= new LinkedList<>();
        //add 0 indegree courses
        for (int i=0;i<numcourse;i++){
            if (indegree[i]==0){
                bfs.add(i);
            }
        }
        int count=bfs.size();
        while (!bfs.isEmpty()){
            int completedCourses=bfs.poll();
            for (int i=0;i<prerequisite.length;i++){
                if (prerequisite[i][1]==completedCourses){
                    int dependentCourse=prerequisite[i][0];
                    indegree[dependentCourse]--;
                    if (indegree[dependentCourse]==0){
                        bfs.add(dependentCourse);
                        count++;
                    }
                }
            }
        }
        return count==numcourse;
    }
    public static void main(String[] args) {
//        Scanner sc = new Scanner(System.in);
        FastScanner sc = new FastScanner();
        PrintWriter out = new PrintWriter(System.out);
       int n=sc.nextInt();
       int m=sc.nextInt();
       int a[][]= new int[n][m];
       for (int i=0;i<n;i++){
           for (int j=0;j<m;j++){
               a[i][j]=sc.nextInt();
           }
       }
       if (canFinish(n,a)){
           System.out.println("Yes");
       }
       else System.out.println("No");
        out.flush();
    }

    static void sort(int[] a) {
        ArrayList<Integer> l=new ArrayList<>();
        for (int i:a) l.add(i);
        Collections.sort(l);
        for (int i=0; i<a.length; i++) a[i]=l.get(i);
    }
    static void sortReverse(long[] a) {
        ArrayList<Long> l=new ArrayList<>();
        for (long i:a) l.add(i);
//        Collections.sort.(l);
        Collections.sort(l,Collections.reverseOrder());
        for (int i=0; i<a.length; i++) a[i]=l.get(i);
    }

    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        String next() {
            while (!st.hasMoreTokens())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }
        int[] readArray(int n) {
            int[] a=new int[n];
            for (int i=0; i<n; i++) a[i]=nextInt();
            return a;
        }
        long[] readArrayLong(long n) {
            long[] a=new long[(int)n];
            for (int i=0; i<n; i++) a[i]=nextLong();
            return a;
        }
        long nextLong() {
            return Long.parseLong(next());
        }
    }


}
