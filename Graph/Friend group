import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.*;

public class Main {
    static int findCircle(int a[][]){
        return findCircle(a,a.length,a[0].length);
    }
    static int findCircle(int a[][],int n,int m){
        boolean vis[]= new boolean[n];
        int count=0;
        for (int i=0;i<n;i++){
            if (vis[i])continue;
            dfs(i,a,vis,n);
            count++;

        }
        return count;
    }
    static void dfs(int i,int a[][],boolean[] vis,int n){
        vis[i]=true;
        for (int friend=0;friend<n;friend++){
            if (i==friend)continue;
            if (vis[friend])continue;
            if (a[i][friend]==1){
                dfs(friend,a,vis,n);
            }
        }
    }
    public static void main(String[] args) {
//        Scanner sc = new Scanner(System.in);
        FastScanner sc = new FastScanner();
        PrintWriter out = new PrintWriter(System.out);
       int n=sc.nextInt();
       int a[][]= new int[n][n];
       for (int i=0;i<n;i++){
           for (int j=0;j<n;j++) {
               a[i][j] = sc.nextInt();
           }
       }
        System.out.println(findCircle(a));


        out.flush();
    }

    static void sort(int[] a) {
        ArrayList<Integer> l=new ArrayList<>();
        for (int i:a) l.add(i);
        Collections.sort(l);
        for (int i=0; i<a.length; i++) a[i]=l.get(i);
    }
    static void sortReverse(long[] a) {
        ArrayList<Long> l=new ArrayList<>();
        for (long i:a) l.add(i);
//        Collections.sort.(l);
        Collections.sort(l,Collections.reverseOrder());
        for (int i=0; i<a.length; i++) a[i]=l.get(i);
    }

    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        String next() {
            while (!st.hasMoreTokens())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }
        int[] readArray(int n) {
            int[] a=new int[n];
            for (int i=0; i<n; i++) a[i]=nextInt();
            return a;
        }
        long[] readArrayLong(long n) {
            long[] a=new long[(int)n];
            for (int i=0; i<n; i++) a[i]=nextLong();
            return a;
        }
        long nextLong() {
            return Long.parseLong(next());
        }
    }


}
