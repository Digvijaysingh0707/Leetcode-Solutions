import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.*;
class Pair{
    String word;
    int depth;
    public Pair(String word,int depth){
        this.word=word;
        this.depth=depth;
    }
}
public class Main {
    static boolean isHelper(int i,int g[][],int[] color){
        Queue<Integer> bfs= new LinkedList<>();
        bfs.add(i);
        color[i]=1;
        while (!bfs.isEmpty()){
            int curr=bfs.poll();
            for (int neughbour:g[curr]){
                if (color[neughbour]!=0) {
                    if (curr != neughbour && color[curr] == color[neughbour]) {
                        return false;
                    }
                }
                else{
                    color[neughbour]=-color[curr];
                    bfs.add(neughbour);
                }

            }
        }
        return true;

    }
    static boolean isbipartite(int graph[][]){
        int n=graph.length;
        int color[]= new int[n];
        for (int i=0;i<n;i++){
            if (color[i]!=0)continue;
            if (!isHelper(i,graph,color)){
                return false;
            }
        }
        return true;
    }
   public static void main(String[] args) {
//        Scanner sc = new Scanner(System.in);
        FastScanner sc = new FastScanner();
        PrintWriter out = new PrintWriter(System.out);
       int n=sc.nextInt();
       int a[][]= new int[n][2];
       for (int i=0;i<n;i++){
           a[i][0]=sc.nextInt();
           a[i][1]=sc.nextInt();
       }
       if (isbipartite(a)){
           System.out.println(1);
       }
       else System.out.println(0);

        out.flush();
    }

    


}
