import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.*;
public class Main {
    public static List<Integer> killProcess(List<Integer> pid,List<Integer> ppid,int kill){
        Map<Integer,List<Integer>> map = new HashMap<>();
        for (int i=0;i<ppid.size();i++){
            List<Integer> list = map.getOrDefault(ppid.get(i),new ArrayList<>());
            list.add(pid.get(i));
            map.put(ppid.get(i),list);
        }
        Queue<Integer> bfs= new LinkedList<>();
        List<Integer> list = new ArrayList<>();
        bfs.add(kill);
        while (!bfs.isEmpty()){
            int curr=bfs.poll();
            list.add(curr);
            if (map.get(curr)!=null){
                bfs.addAll(map.get(curr));
            }
        }
        return list;
    }

    public static void main(String[] args) {
//        Scanner sc = new Scanner(System.in);
        FastScanner sc = new FastScanner();
        PrintWriter out = new PrintWriter(System.out);
        int n=sc.nextInt();
        int k=sc.nextInt();
        List<Integer> pid= new ArrayList<>();
        for (int i=0;i<n;i++){
            int x=sc.nextInt();
            pid.add(x);
        }
        List<Integer> ppid= new ArrayList<>();
        for (int i=0;i<n;i++){
            int x=sc.nextInt();
            ppid.add(x);
        }
        List<Integer> ans= killProcess(pid,ppid,k);
        for (int i=0;i<ans.size();i++) {
            System.out.print(ans.get(i)+" ");
        }
        System.out.println();
       out.flush();
        }

        static void sort(int[] a) {
        ArrayList<Integer> l=new ArrayList<>();
        for (int i:a) l.add(i);
        Collections.sort(l);
        for (int i=0; i<a.length; i++) a[i]=l.get(i);
    }
    static void sortReverse(long[] a) {
        ArrayList<Long> l=new ArrayList<>();
        for (long i:a) l.add(i);
//        Collections.sort.(l);
        Collections.sort(l,Collections.reverseOrder());
        for (int i=0; i<a.length; i++) a[i]=l.get(i);
    }

    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        String next() {
            while (!st.hasMoreTokens())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }
        int[] readArray(int n) {
            int[] a=new int[n];
            for (int i=0; i<n; i++) a[i]=nextInt();
            return a;
        }
        long[] readArrayLong(long n) {
            long[] a=new long[(int)n];
            for (int i=0; i<n; i++) a[i]=nextLong();
            return a;
        }
        long nextLong() {
            return Long.parseLong(next());
        }
    }


}
