import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
class Pair{
    int x;int y;
    int dis;
    Pair(int x,int y,int dis){
        this.x=x;
        this.y=y;
        this.dis=dis;
    }
}public class Cp {
    static int knightMoves(int start[],int target[],int n){
        boolean vis[][]= new boolean[n+1][n+1];
        Queue<Pair> q= new LinkedList<>();
        q.add(new Pair(start[0],start[1],0));
        Pair t;
        int x,y;
        vis[start[0]][start[1]]=true;
        int xmoves[]={-1,1,-2,2,-2,2,-1,1};
        int ymoves[]={2,2,1,1,-1,-1,-2,-2};
        while (!q.isEmpty()){
            t=q.poll();
            if (t.x==target[0]&&t.y==target[1]){
                return t.dis;
            }
            for (int k=0;k<8;k++){
                 x=t.x+xmoves[k];
                 y=t.y+ymoves[k];
                if (x>0 && x<=n&& y>0 && y<=n && !vis[x][y]){
                    vis[x][y]=true;
                    q.add(new Pair(x,y,t.dis+1));
                }
            }

        }
        return Integer.MAX_VALUE;
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- >= 1) {
            int n=sc.nextInt();
            int start[]= new int[2];
            for (int i=0;i<2;i++){
                start[i]=sc.nextInt();
            }
            int target[]= new int[2];
            for (int i=0;i<2;i++){
                target[i]=sc.nextInt();
            }
            System.out.println(knightMoves(start,target,n));

        }
    }
}
