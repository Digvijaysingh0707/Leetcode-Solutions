/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    public Node cloneGraph(Node node) {
        if (node==null){
           return null;
       }
       Queue<Node> q = new LinkedList<>();
       q.add(node);
       HashMap<Node,Node> map = new HashMap<>();
       map.put(node,new Node(node.val));
       while (!q.isEmpty()){
           Node curr=q.poll();
           Node copyNode= map.get(curr);
           if (curr.neighbors!=null){
               List<Node> currNeighbors=curr.neighbors;
               for (Node neigh:currNeighbors){
                   Node cloned=map.get(neigh);
                   if (cloned==null){
                       q.add(neigh);
                       cloned = new Node(neigh.val);
                       map.put(neigh,cloned);
                   }
                   copyNode.neighbors.add(cloned);
               }
           }
       }
       return map.get(node);
    }
}
