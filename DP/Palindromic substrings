class Solution {
    public int countSubstrings(String s) {
        int n=s.length();
        int dp[][]= new int[1001][1001];
        for(int i=0;i<n;i++){
            dp[i][i]=1;
        }
        for(int i=0;i<n-1;i++){
            if(s.charAt(i)==s.charAt(i+1)){
                dp[i][i+1]=1;
            }
        }
        for(int d=2;d<n;d++){
            int i=0,j=d;
            while(j<n){
                if(s.charAt(i)==s.charAt(j)&&dp[i+1][j-1]==1){
                    dp[i][j]=1;
                }
                else dp[i][j]=0;
                i++;
                j++;
            }
        }
        int count=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(dp[i][j]==1)count++;
            }
        }
        return count;
        
    }
}


//Recursive

class Solution {
    public int countSubstrings(String s) {
        int n = s.length();
        int result = 0;
        
        for (int i=0; i<n; i++){
            result += findP(s, i, i, n);
            result += findP(s, i, i+1, n);
        }
        
        return result;
    }
    
    int findP(String s, int l, int r, int n){
        int temp= 0;
        
        while (l>=0  && r<=n-1){
            if (s.charAt(l) == s.charAt(r)){
                l--;
                r++;
                temp ++;
            }
            else{
                break;
            }
        }
        
        return temp;
    }
}
