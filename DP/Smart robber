import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;
public class Main {
    static FastScanner sc = new FastScanner();
    static int find(int a[]){
        if (a.length==0)return 0;//dp is the loot arry
        if (a.length==0)return a[0];
        if (a.length==2)return Math.max(a[0],a[1]);
        int dp[]= new int[a.length];
        dp[0]=a[0];
        dp[1]=Math.max(a[0],a[1]);
        for (int i=2;i<a.length;i++){
            dp[i]=Math.max(a[i]+dp[i-2],dp[i-1]);
        }
        return dp[a.length-1];
    }

    public static void main(String[] args) {
        int t=sc.nextInt();
        while (t-->=1) {
            int n = sc.nextInt();
            int dp[] = new int[n];
            for (int i = 0; i < dp.length; i++) {
                dp[i] = sc.nextInt();
            }

            System.out.println(find(dp));
        }





    }

    //    static void sort(int[] a) {
//        ArrayList<Integer> l=new ArrayList<>();
//        for (int i:a) l.add(i);
//        Collections.sort(l);
//        for (int i=0; i<a.length; i++) a[i]=l.get(i);
//    }
    static void sort(long[] a) {
        ArrayList<Integer> l = new ArrayList<>();
        for (long i : a) l.add((int) i);
        Collections.sort(l);
        for (int i = 0; i < a.length; i++) a[i] = l.get(i);
    }

    static class FastScanner {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer("");

        String next() {
            while (!st.hasMoreTokens())
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        int[] readArray(int n) {
            int[] a = new int[n];
            for (int i = 0; i < n; i++) a[i] = nextInt();
            return a;
        }

        long nextLong() {
            return Long.parseLong(next());
        }
    }
}
