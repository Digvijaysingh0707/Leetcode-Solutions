import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.*;
/*f
*/
//---------------------------------------------------------------------------------------------------------------
  class ListNode{
     int val;
     ListNode next;
     ListNode(int x){
         val=x;
     }
}
public class Main {
     static ListNode mergeKsorted(ListNode[] lists){
         PriorityQueue<ListNode> pq= new PriorityQueue<>(new Comparator<ListNode>() {
             public int compare(ListNode o1, ListNode o2) {
                 return o1.val - o2.val;
             }
         });
         for (ListNode node:lists){
             if (node!=null)pq.add(node);
         }
         ListNode node = new ListNode(-1);
         ListNode curr=node;
         while (!pq.isEmpty()){
             ListNode temp =pq.remove();
             curr.next=temp;
             curr=curr.next;
             if (temp.next!=null){
                 pq.add(temp.next);
             }

         }
         return node.next;
     }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
//        FastScanner sc = new FastScanner();
        PrintWriter out = new PrintWriter(System.out);
       int n=sc.nextInt();
       int m=sc.nextInt();
       ListNode[] node = new ListNode[n*m];
       for (int i=0;i<(n*m);i++){
           int x=sc.nextInt();
           node[i]= new ListNode(x);
       }
       ListNode ans=mergeKsorted(node);
        for (int i=0;i<(n*m);i++){
            System.out.print(ans.val+" ");
        }
      out.flush();
    }
    //------------------------------------------------------------------------------------------------------------
    static void sort(int[] a) {
        ArrayList<Integer> l=new ArrayList<>();
        for (int i:a) l.add(i);
        Collections.sort(l);
        for (int i=0; i<a.length; i++) a[i]=l.get(i);
    }
    static int[] find(int n,int start,int diff){
        int a[]= new int[n];
        a[0]=start;
        for (int i=1;i<n;i++)a[i]=a[i-1]+diff;
        return a;
    }
    static void swap(int a,int b){
        int c=a;
        a=b;
        b=c;
    }

    static void printArray(int a[]){
        for (int i=0;i<a.length;i++){
            System.out.print(a[i]+" ");
        }
    }
    static boolean sorted(int a[]){
        int n=a.length;
        boolean flag=true;
        for (int i=0;i<n-1;i++){
            if (a[i]>a[i+1])flag=false;
        }
        if (flag)return true;
        else  return false;
    }
    public static int findlog(long n){
        if(n == 0)
            return 0;

        if(n == 1)
            return 0;
        if(n == 2)
            return 1;
        double num = Math.log(n);
        double den = Math.log(2);
        if(den == 0)
            return 0;
        return (int)(num/den);
    }
    public static long gcd(long a,long b){
        if(b%a == 0)
            return a;
        return gcd(b%a,a);
    }
    public static int gcdInt(int a,int b){

        if(b%a == 0)
            return a;

        return gcdInt(b%a,a);

    }

    static void sortReverse(long[] a) {
        ArrayList<Long> l=new ArrayList<>();
        for (long i:a) l.add(i);
//        Collections.sort.(l);
        Collections.sort(l,Collections.reverseOrder());
        for (int i=0; i<a.length; i++) a[i]=l.get(i);
    }

    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        String next() {
            while (!st.hasMoreTokens())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }
        int[] readArray(int n) {
            int[] a=new int[n];
            for (int i=0; i<n; i++) a[i]=nextInt();
            return a;
        }
        long[] readArrayLong(long n) {
            long[] a=new long[(int)n];
            for (int i=0; i<n; i++) a[i]=nextLong();
            return a;
        }
        long nextLong() {
            return Long.parseLong(next());
        }
    }


}
